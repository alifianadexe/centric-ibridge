# ============================================================================
#
# 		Kraken Bridge environment file
# 		-----------------------------------------------
#
#       This version of the .env file is
#       intended for use with:
#
#           * Prepared for Linux OS Deployment
#
# 	Copyright (C) Busana Apparel Group 2022. All rights reserved.
#   This module is part of Centric PLM Integration Bridge and is released under
#   the Apache-2.0 License: https://www.apache.org/licenses/LICENSE-2.0
#-----------------------------------------------------------------------------

# Deployment mode, set true if used in production
production.mode=false

# Async mode support, only supported in production
# PLEASE NOTE: you cannot combine sync service with async, when async mode is true all services
# were expected has been async-ready
async.mode=false

# Gobal pool, when true, it would use single ThreadPool (combined with production mode = false)
# or ProcessPool (combined with production mode = true). By default global pool was set to false
# which means it would use multi thread pool (non-production), or
# multiprocess pool + multithread pool (production mode).
# * Recommended setting: false
global.pool=false

# Shutdown address and port
shutdown.addr=127.0.0.1
shutdown.port=9999

# Kraken base service URL and credential information
kraken.rest.base.url=http://<krakenserver-and-port>/bagprod/rest/svc/
kraken.rest.username=<<username>>
kraken.rest.password=<<password>>

# Centric PLM base service URL and credential information
c8.rest.base.url=http://<c8server-and-port>/csi-requesthandler/api/v2/
c8.rest.username=<<username>>
c8.rest.password=<<password>>

# ======== REDIS ========
# Use REDIS in module, set to true/false (default: false)
redis.enabled=false

# redis.url is a url of:
# redis://[[username]:[password]]@localhost:6379/0
# rediss://[[username]:[password]]@localhost:6379/0
# unix://[[username]:[password]]@/path/to/socket.sock?db=0
#
# Three URL schemes are supported:
#
# redis://   creates a TCP socket connection. See more at https://www.iana.org/assignments/uri-schemes/prov/redis
# rediss://  creates a SSL wrapped TCP socket connection. See more at https://www.iana.org/assignments/uri-schemes/prov/rediss
# unix://    creates a Unix Domain Socket connection.
redis.url=<<redis_url>>

# ======== MINIO ========
# Use MINIO in module, set to true/false (default: false)
minio.enabled=false

# minio address url
minio.address=<<address>>

# minio access key
minio.access.key=<<access_key>>

# minio secret key
minio.secret.key=<<secret_key>>

# minio secured protocol
minio.secured=false

# ======== LOGGING SECTION ========
# Active log level used, set to DEBUG/INFO/WARNING/ERROR/CRITICAL, default: DEBUG
log.level=DEBUG

# logging format used, see: https://docs.python.org/3/library/logging.html
log.format=%(asctime)s - %(message)s

# specify log file in full-path
# log.file=

# ======== FEATURE SECTION ========
#
# iBridge feature is enabled/disabled by setting this to true/false (default: true)
bridge.enabled=true

# Bridge database support enabled
bridge.database.enabled=true

# Available Bridge Databases:
bridge.available.databases="
sage=mssql+pymssql://sa:tiger@127.0.0.1/MYDB,
"


# REST API microservice is enabled/disabled by setting this to true/false (default: false)
restapi.enabled=false

# Root URL prefix, default "/", change this if REST server run behind the proxy with specific prefix
restapi.root.path=/

# REST API Jwt Salt key
restapi.secret.key=<<secretkey>>

# REST Auth LDAP Host Address
# example: ldap://localhost:389
ldap.address=<<ldap_address>>

# LDAP Bind user
# example: uid=user,ou=system
ldap.bind.dn=<<dn_info>>

# LDAP Bind password
ldap.bind.password=<<password>>

# REST Auth LDAP User prefix
ldap.user.prefix=uid

# REST Auth LDAP User suffix
# example: ou=users,ou=auth,dc=mycompany,dc=com
ldap.user.suffix=<<ldap_usersuffix>>

# Available API Services:
api_user=api.v1.services.auth.AuthModulePreparer
restapi.available.services="
${api_user},
api.v1.services.sage.SageModulePreparer,
api.v1.services.fastreact.FastReactModulePreparer,
api.v1.services.archive.ArchiveModulePreparer,
api.v1.services.movex.MovexModulePreparer
"
# Available API Databases:
restapi.available.databases="
sage=mssql+pymssql://sa:tiger@127.0.0.1/MYDB,
movex=ibmdb2://dbsadmin:tiger@127.0.0.1/MYDB,
"

# -------------------------------------------------
# MQ Transport definition
# -------------------------------------------------
# allow more than one transport defined, options:
#
#   mqtype: [stomp, mqtt, amqp, redis]
#
# Note:
#   for **redis** transport, only channel information were required, address, port, etc defined in redis.url
#
# mq.transport.count=1

# ---- mqtype [stomp, mqtt, amqp]
# mq.transport.0.type=stomp
# mq.transport.0.address=xx.xx.xx.xx
# mq.transport.0.port=61613
# mq.transport.0.user=hello
# mq.transport.0.passwd=world
# mq.transport.0.channel=mychannel
# mq.transport.0.clientid=myclientid
# mq.transport.0.adapter.class=myclientid

